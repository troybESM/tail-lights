service: oco-tl
frameworkVersion: "3"

params:
    dev:
        ENABLE_TIME_TRIGGER: false
    prod:
        ENABLE_TIME_TRIGGER: false
    default:
        # This is mostly an example of how to use params for envs
        # DEMO_BUCKET: generic.bucket.for.testing
        ENABLE_TIME_TRIGGER: false

#Config and Default Lambda Settings
provider:
    name: aws
    runtime: python3.11
    stage: ${opt:stage, 'dev'} # The github actions pipeline will pass the branch name as the stage
    region: ${opt:region, 'us-east-2'}
    deploymentBucket:
        name: ${aws:accountId}-serverless
    timeout: 29
    memorySize: 256
    stackTags:
        application: ${self:service}
        environment: ${self:provider.stage}
        ManagedBy: Serverless Framework
    # http:
    #     authorizers:
    #         customAuthorizer:
    #             type: request
    #             functionName: customAuthorizer
    # A lot of older examples use payload v1.0, but it is easy to convert.
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#event--payload-format
    # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html
    # apiGateway:
    #   resourcePolicy:
    #     - Effect: Allow
    #       Principal: "*"
    #       Action: execute-api:Invoke
    #       Resource:
    #         - execute-api:/*/*/*
    #       Condition:
    #         IpAddress:
    #           aws:SourceIp:
    #             - ""

    iam: # These are the permission that your lambdas will have.
        role:
            statements:
                - Effect: Allow
                  Action:
                      - "dynamodb:Get*"
                      - "dynamodb:Put*"
                      - "dynamodb:Update*"
                      - "dynamodb:Query"
                      - "dynamodb:Scan"
                  Resource:
                      - !GetAtt DemoDynamoTable.Arn
                      # - !Join ["/", [!GetAtt DemoDynamoTable.Arn, index/*]] # Need query access to index

custom:
    deploymentBucket:
        blockPublicAccess: true
        tags:
            - Key: Name
              Value: ${self:provider.deploymentBucket.name}
            - Key: environment
              Value: ${self:provider.stage}
    pythonRequirements:
        dockerizePip: non-linux

functions:
    customAuthorizer:
        handler: src/custom_authorizer.handler
        description: This function serves as an example of custom authorizers
    getShows:
        handler: src/shows.get_all
        description: Returns all shows
        events:
            - http:
                  path: /shows
                  method: GET
    addShow:
        handler: src/shows.add
        description: Adds a show
        environment:
            TABLE: !Ref OCODynamoTable
        events:
            - http:
                  path: /shows/add
                  method: POST
#   # API Gateway
#   Api:
#     handler: src/api_handler.hello
#     description: This function demonstrates various api events
#     events:
#       - http:
#           path: /
#           method: get
#       - http:
#           path: /hello_auth/{name}
#           method: get
#           authorizer:
#             name: customAuthorizer
#       - http:
#           path: /hello
#           method: get
#       # - schedule:
#       #     rate: cron(30 12 * * ? *)
#       #     enabled: ${param:ENABLE_TIME_TRIGGER}

#   # Dynamo / Kinesis
#   writeToDynamo:
#     handler: src/dynamodb_handler.write_item
#     description: This function is an example of writing to dynamo to trigger the dynamo processor lambda
#     environment:
#       TABLE: !Ref DemoDynamoTable

#   dynamoProcessor:
#     handler: src/dynamodb_handler.process_stream
#     description: This function is an example of triggering off of items being added to dynamodb
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - stream:
#           type: dynamodb
#           arn: !GetAtt DemoDynamoTable.StreamArn
#           filterPatterns:
#             - eventName: [INSERT]

#   dynamoTTLProcessor:
#     handler: src/dynamodb_handler.process_ttl_stream
#     description: This function is an example of triggering off of items being removed from dynamodb
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - stream:
#           type: dynamodb
#           arn: !GetAtt DemoDynamoTable.StreamArn
#           filterPatterns:
#             - eventName: [REMOVE]

# ######################################################
# ##                 Demo Functions                   ##
# ######################################################

#   nameApi:
#     handler: src/api_handler.hello_name
#     description: This function logs the name to dynamodb
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - http:
#           path: /hello/{name}
#           method: get # would be a post IRL

#   getWinner:
#     handler: src/api_handler.get_winner
#     description: This function returns the winner
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - http:
#           path: /winner
#           method: get
#   getEntrants:
#     handler: src/api_handler.show_entrants
#     description: This function returns the entrants
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - http:
#           path: /entrants/raw
#           method: get
#   getUniqueEntrants:
#     handler: src/api_handler.show_unique_entrants
#     description: This function returns the entrants
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - http:
#           path: /entrants
#           method: get
#   addWinner:
#     handler: src/api_handler.add_winner
#     description: This function adds the winning number to dynamo table
#     environment:
#       TABLE: !Ref DemoDynamoTable
#     events:
#       - http:
#           path: /winner/add/{number}
#           method: post

# TODO Lambda behind WAF
# TODO LAMBDA behind Cognito auth

plugins:
    - serverless-better-credentials
    - serverless-deployment-bucket
    - serverless-plugin-resource-tagging
    - serverless-python-requirements

resources:
    Resources:
        # Dynamodb
        OCODynamoTable:
            # WARNING! This table will be deleted with the rest of the stack taking your data with it.
            # It is recommended that you don't store critical data here. If you want your ddb here you
            # can use serverless-compose and split your infra into a different stack.
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: oco-${self:provider.stage}
                AttributeDefinitions:
                    - AttributeName: pk
                      AttributeType: S
                    - AttributeName: sk
                      AttributeType: S
                    - AttributeName: GSI1PK
                      AttributeType: S
                    - AttributeName: GSI1SK
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema: # Required
                    - AttributeName: pk
                      KeyType: HASH
                    - AttributeName: sk
                      KeyType: RANGE
                PointInTimeRecoverySpecification:
                    PointInTimeRecoveryEnabled: true
                StreamSpecification:
                    StreamViewType: NEW_AND_OLD_IMAGES
                TimeToLiveSpecification:
                    AttributeName: TTL
                    Enabled: true
                GlobalSecondaryIndexes:
                    - IndexName: GSI1
                      KeySchema:
                          - AttributeName: GSI1PK
                            KeyType: HASH
                          - AttributeName: GSI1SK
                            KeyType: RANGE
                      Projection:
                          ProjectionType: INCLUDE
                          NonKeyAttributes:
                              - GSI1DATA
